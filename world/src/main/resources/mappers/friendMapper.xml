<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

  
<mapper namespace="FriendDAO">
 
  	<select id="getfriendList" resultType="friend">
  		select * from friend 
  	</select>
  
  	<select id="getfriend" resultType="friend" parameterType="friend">
  		select * from friend where marketId=1
  	</select>
  	
  	<select id="getfriendCount" resultType="friend" parameterType="friend">
  		select count(*)"friendNo" from friend where friendTo=#{value} and accept ='1'
  	</select>

 	<!-- 내가 일촌 신청시, 일촌 신청 페이지에 작성한 정보를 일촌 테이블에 저장하는 sql -->
  	<insert id="requestFriend">
  		insert into friend values(seq_friend.NEXTVAL,#{friendTo},#{friendFrom},#{nicknameTo},#{nicknameFrom},1,#{message})
  	</insert>
  	
  	<!-- 나에게 온 일촌 신청 리스트를 불러오는 sql -->
  	<select id="getRequestList" resultType="friend">
  		select * from friend where friendTo=#{value} and accept=1
  	</select>
  
  	<!-- 나에게 온 일촌 신청 리스트중 한 가지를 클릭했을 때, 그에 대한 일촌 신청 페이지 정보를 불러오는 sql -->
  	<select id="getOneRequestFriend" resultType="friend">
  		select * from friend where accept=1 and friendTo=#{friendTo} and friendFrom=#{friendFrom}
  	</select>
  	
  	<!-- 내가 일촌 수락했을 때, 일촌 테이블에 1(미수락)이었던 accept를 2(수락=일촌상태)로 업데이트하는 sql -->
  	<update id="acceptFriend" parameterType="friend">
  		update friend set accept=2 where friendTo=#{friendTo} and friendFrom=#{friendFrom}
  	</update>
  	
  	<!-- 내가 일촌 수락시 상대방도 자신의 일촌 목록을 조회할 수 있도록 일촌 테이블에 상대방 입장에서 데이터 넣는 sql -->
  	<insert id="insertFriend" parameterType="friend">
  		<!-- 내가 일촌 수락할때 일촌테이블에 들어가는 데이터를 friendFrom과 friendTo의 위치, nicknameFrom과 nicknameTo의 위치만 바꾸어 한 번 더 넣어줌으로써 상대방의 입장에서도 일촌 목록 조회할 수 있도록(select * from friend where friendTo=?) -->
  		insert into friend values(seq_friend.NEXTVAL,#{friendFrom},#{friendTo},#{nicknameFrom},#{nicknameTo},2,#{message}) 
  	</insert>
  	
  	<update id="rejectFriend">
  		update friend set accept=3 where friendTo=#{friendTo} and friendFrom=#{friendFrom}
  	</update>
	
	<!-- 내 일촌 목록 불러오는 sql -->
	<select id="myFriendList" resultType="friend">
		select * from friend where friendTo=#{friendTo} and accept=2
	</select>
	
	<!-- 일촌 명 변경 -->
	<update id="updateFriend">
		update friend set nicknameFrom=#{nicknameFrom} where friendTo=#{friendTo} and friendFrom=#{friendFrom}
	</update>
	
	<update id="updateFriendDB">
		update friend set nicknameFrom=#{nicknameFrom} where friendTo=#{friendTo} and friendFrom=#{friendFrom}
	</update>
	
	<update id="updateFriendDB2">
		update friend set nicknameTo=#{nicknameFrom} where friendTo=#{friendFrom} and friendFrom=#{friendTo}
	</update>
	
	<!-- 일촌 삭제 -->
	<update id="deleteFriend">
		delete friend where friendTo=#{friendTo} and friendFrom=#{friendFrom}
	</update>
	
		<!-- 나에게 일촌 신청한(accept=1) '이름' 리스트 불러오는 쿼리 -->
	<select id="getRequestNameById" resultType="friend">
		select a.friendTo, a.friendFrom, a.nicknameTo, a.nicknameFrom, (b.name)"message"  from friend a, member b where a.friendFrom = b.memberNo(+) and friendTo =#{friendTo} and a.accept=1
	</select>
	
	<!-- 이미 일촌인(accept=2) '이름' 리스트 불러오는 쿼리 -->
	<select id="getFriendNameById" resultType="friend">
		select a.friendTo, a.friendFrom, a.nicknameTo, a.nicknameFrom, (b.name)"message"  from friend a, member b where a.friendFrom = b.memberNo(+) and friendTo =#{friendTo} and a.accept=2
	</select>
	
	<select id="getOneFriendNameById" resultType="friend">
		select (b.name)"message" from friend a, member b where a.friendFrom = b.memberNo(+) and friendTo=#{friendTo} and friendFrom=#{friendFrom} and a.accept=1
	</select>



  
 	
</mapper>